unit SaleRepository;

interface

uses Sale, Session;

type
	TSaleRepository = class
        class function GetAllForSession(ABaseName: string; ASession: TSession): TSalesArray;
    end;

implementation

{ TSaleRepository }

uses db_comps_additional, SysUtils, Discount;

class function TSaleRepository.GetAllForSession(ABaseName: string;
  ASession: TSession): TSalesArray;
var
	adc: TDBCompsAddit;
	query: string;
begin
	adc := TDBCompsAddit.Create(ABaseName);
	if not adc.Init then
	begin
		result := nil;
		raise Exception.Create('TSaleRepository.GetAllForSession Can not init adc');
		adc.Destroy;
		Exit;
	end;
	query :=

'SELECT ' +
'    s.dt as s_dt, s.sale_type as s_st, d.id as d_id, money_table.money as money ' +
'FROM                                                                            ' +
'    sales s LEFT JOIN discounts d ON s.discount_id = d.id                       ' +
'    INNER JOIN                                                                  ' +
'		(SELECT                                                                  ' +
'			s1.id as s_id,                                                       ' +
'		   SUM(sg.amount * pg.price) as money                                    ' +
'		FROM                                                                     ' +
'			sales s1 LEFT JOIN discounts d ON s1.discount_id = d.id              ' +
'		   INNER JOIN sale_goods sg ON sg.sale_id = s1.id                        ' +
'		   INNER JOIN priced_goods pg ON sg.good_id = pg.id                      ' +
'		WHERE                                                                    ' +
'			s1.sess_id = :sess_id                                                ' +
'		GROUP BY s1.id) as money_table                                           ' +
'    ON s.id = money_table.s_id;                                                 ';

	with adc.query do
	begin
		SQL.Text := query;
		ParamByName('sess_id').AsInteger := ASession.Id;
        try
			Open;
		except
			on E:Exception do
			begin
				result := nil;
				raise Exception.Create('TSaleRepository.GetAllForSession(); Can not execute query! Error: ' + E.Message);
				adc.Destroy;
				Exit;
			end;
		end;
		while (not eof) do
		begin
			setlength(result, length(result) + 1);
			result[high(result)] := TSale.Create(
				FieldByName('s_id').AsInteger,
				FieldByName('s_dt').AsDateTime,
				ASession,
				TDiscount.Create(FieldByName('d_id').AsInteger),
				FieldByName('s_st').AsInteger,
				FieldByname('money').AsFloat
			);
			Next;
		end;
		Close;
	end;
	adc.Destroy;
end;

end.
