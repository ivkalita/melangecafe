unit GoodRepository;

interface
	uses Good;

type
	TGoodRepository = class
	public
		class function GetAll(ABaseName: string): TGoodArray;
		class function GetAllByCaption(ABaseName: string; ACaption: string): TGoodArray;
		class function GetAllOrderBy(ABaseName: string; AOrderBy: string): TGoodArray;
		class function GetLastInsertedId(ABaseName: string): integer;
		class function GetForXL(ABaseName: string; ASessId: integer): TXLGoodArray;
		class function GetAllWithoutCheck(ABaseName: string): TGoodArray;
	end;

implementation

uses
	db_comps_additional, SysUtils;

class function TGoodRepository.GetAll(ABaseName: string): TGoodArray;
begin
	result := GetAllOrderBy(ABaseName, 'caption');
end;

class function TGoodRepository.GetAllByCaption(ABaseName,
  ACaption: string): TGoodArray;
var
	adc: TDBCompsAddit;
begin
	adc := TDBCompsAddit.Create(ABaseName);
	if not adc.Init then
	begin
		result := nil;
		raise Exception.Create('TGoodRepository.GetAll(); Can not init adc');
		adc.Destroy;
		Exit;
	end;
	with adc.query do
	begin
		SQL.Text :=
		'SELECT ' +
			'g.id, pg.price, g.caption, pg.action_able, g.flag, g.parent_cat ' +
		'FROM ' +
			'Goods g INNER JOIN Priced_goods pg ' +
		'ON pg.good_id = g.id ' +
		'WHERE ' +
			'pg.expiredAt is null and g.caption like :caption' +
		'ORDER BY g.caption';
		ParamByName('caption').AsString := '%' + ACaption = '%'
		try
			Open;
		except
			on E:Exception do
			begin
				raise Exception.Create(
				'TGoodRepository.GetAll(); Can not execute query! Error: ' + E.Message
			);
				adc.Destroy;
				Exit;
			end;
		end;
		while not eof do
		begin
			setlength(result, length(result) + 1);
			result[high(result)] := TGood.Create(
				FieldByName('id').AsInteger,
				FieldByName('action_able').AsInteger,
				FieldByName('parent_cat').AsInteger,
				FieldByName('flag').AsInteger,
				FieldByName('price').AsFloat,
				FieldByName('caption').AsString
			);
			Next;
		end;
	end;
	adc.Destroy;
end;

class function TGoodRepository.GetAllOrderBy(ABaseName,
	AOrderBy: string): TGoodArray;
var
	adc: TDBCompsAddit;
begin
	adc := TDBCompsAddit.Create(ABaseName);
	if not adc.Init then
	begin
		result := nil;
		raise Exception.Create('TGoodRepository.GetAll(); Can not init adc');
		adc.Destroy;
		Exit;
	end;
	with adc.query do
	begin
		SQL.Text :=
		'SELECT ' +
			'g.id, pg.price, g.caption, pg.action_able, g.flag, g.parent_cat ' +
		'FROM ' +
			'Goods g INNER JOIN Priced_goods pg ' +
		'ON pg.good_id = g.id ' +
		'WHERE ' +
			'pg.expiredAt is null ' +
		'ORDER BY ' +
			AOrderBy;
		try
			Open;
		except
			on E:Exception do
			begin
				raise Exception.Create(
				'TGoodRepository.GetAll(); Can not execute query! Error: ' + E.Message
			);
				adc.Destroy;
				Exit;
			end;
		end;
		while not eof do
		begin
			setlength(result, length(result) + 1);
			result[high(result)] := TGood.Create(
				FieldByName('id').AsInteger,
				FieldByName('action_able').AsInteger,
				FieldByName('parent_cat').AsInteger,
				FieldByName('flag').AsInteger,
				FieldByName('price').AsFloat,
				FieldByName('caption').AsString
			);
			Next;
		end;
	end;
	adc.Destroy;
end;

class function TGoodRepository.GetAllWithoutCheck(ABaseName: string): TGoodArray;
var
	adc: TDBCompsAddit;
begin
	adc := TDBCompsAddit.Create(ABaseName);
	if not adc.Init then
	begin
		result := nil;
		raise Exception.Create('TGoodRepository.GetAllWithoutCheck(); Can not init adc');
		adc.Destroy;
		Exit;
	end;
	with adc.query do
	begin
		SQL.Text :=
		'SELECT ' +
			'g.id, g.caption, g.flag ' +
		'FROM ' +
			'Goods g ' +
		'ORDER BY g.id';
		try
			Open;
		except
			on E:Exception do
			begin
				raise Exception.Create(
				'TGoodRepository.GetAllWithoutCheck(); Can not execute query! Error: ' + E.Message
			);
				adc.Destroy;
				Exit;
			end;
		end;
		while not eof do
		begin
			setlength(result, length(result) + 1);
			result[high(result)] := TGood.Create(
				FieldByName('id').AsInteger,
				FieldByName('caption').AsString,
				FieldByName('flag').AsInteger
			);
			Next;
		end;
	end;
	adc.Destroy;
end;



class function TGoodRepository.GetForXL(ABaseName: string;
	ASessId: integer): TXLGoodArray;
var
	adc: TDBCompsAddit;
	query: string;
	sumAmount, sumActionAmount, sumDiscountAmount: double;
begin
	adc := TDBCompsAddit.Create(ABaseName);
	if not adc.Init then
	begin
		result := nil;
		raise Exception.Create('TGoodRepository.GetForXL(); Can not init adc');
		adc.Destroy;
		Exit;
	end;
	query :=
		'SELECT ' +
		'    g1.id, pg1.id, pg1.price, g1.caption, sold_goods.amount, sold_goods.action_amount, sold_goods.discount_amount, pg1.expiredAt ' +
		'FROM ' +
		'    GOODS g1 ' +
		'    INNER JOIN priced_goods pg1 ON g1.id = pg1.good_id ' +
		'    LEFT JOIN ' +
		'    (SELECT  ' +
		'        pg.id as id, sum(sg.amount) as amount, sum(sg.action_amount) as action_amount, sum((sg.amount + sg.action_amount) * d.used) as discount_amount ' +
		'    FROM  ' +
		'        priced_goods pg ' +
		'        INNER JOIN goods g ON pg.good_id = g.id ' +
		'        LEFT JOIN sale_goods sg ON pg.id = sg.GOOD_ID ' +
		'        LEFT JOIN sales s ON sg.SALE_ID = s.id ' +
		'        LEFT JOIN discounts d ON s.discount_id = d.id ' +
		'    WHERE ' +
		'        s.sess_id = :sess_id ' +
		'    GROUP BY ' +
		'        pg.id) as sold_goods ' +
		'    ON pg1.id = sold_goods.id ' +
		'WHERE ' +
		'    pg1.expiredAt is null ' +
		'ORDER BY ' +
		'    g1.id, ' +
		'    pg1.id ';
	with adc.query do
	begin
		//get actual OR sold goods WHERE flag = 1 order by id
		SQL.Text := query;
//		ParamByName('flag').AsInteger := 1;
		ParamByName('sess_id').AsInteger := ASessId;
		try
			Open;
		except
			on E:Exception do
			begin
				result := nil;
				raise Exception.Create('TGoodRepository.GetForXL(); Can not execute query! Error: ' + E.Message);
				adc.Destroy;
				Exit;
			end;
		end;
		while (not eof) do
		begin
			if (FieldByName('sum_amount').IsNull) then
				sumAmount := 0
			else
				sumAmount := FieldByName('sum_amount').AsFloat;

			if (FieldByName('sum_action_amount').IsNull) then
				sumActionAmount := 0
			else
				sumActionAmount := FieldByName('sum_action_amount').AsFloat;

			if (FieldByName('sum_amount_discount').IsNull) then
				sumDiscountAmount := 0
			else
				sumDiscountAmount := FieldByName('sum_amount_discount').AsFloat;
			if (FieldByName('id').AsInteger = 497) then
			begin
				sumAmount := sumAmount;
			end;
			sumAmount := sumAmount - sumDiscountAmount;
			setlength(result, length(result) + 1);
			result[high(result)] := TXLGood.Create(
				FieldByName('id').AsInteger,
				FieldByName('action_able').AsInteger,
				FieldByName('parent_cat').AsInteger,
				FieldByName('flag').AsInteger,
				FieldByName('price').AsFloat,
				FieldByName('caption').AsString,
				sumAmount,
				sumActionAmount,
				sumDiscountAmount
			);
			Next;
		end;
		Close;

		SQL.Text := query;
		ParamByName('flag').AsInteger := 2;
		ParamByName('sess_id').AsInteger := ASessId;
		try
			Open;
		except
			on E:Exception do
			begin
				result := nil;
				raise Exception.Create('TGoodRepository.GetForXL(); Can not execute query! Error: ' + E.Message);
				adc.Destroy;
				Exit;
			end;
		end;
		while (not eof) do
		begin
			if (FieldByName('sum_amount').IsNull) then
				sumAmount := 0
			else
				sumAmount := FieldByName('sum_amount').AsFloat;
			if (FieldByName('sum_action_amount').IsNull) then
				sumActionAmount := 0
			else
				sumActionAmount := FieldByName('sum_action_amount').AsFloat;
			if (FieldByName('sum_amount_discount').IsNull) then
				sumDiscountAmount := 0
			else
				sumDiscountAmount := FieldByName('sum_amount_discount').AsFloat;
			sumAmount := sumAmount - sumDiscountAmount;
			setlength(result, length(result) + 1);
			result[high(result)] := TXLGood.Create(
				FieldByName('id').AsInteger,
				FieldByName('action_able').AsInteger,
				FieldByName('parent_cat').AsInteger,
				FieldByName('flag').AsInteger,
				FieldByName('price').AsFloat,
				FieldByName('caption').AsString,
				sumAmount,
				sumActionAmount,
				sumDiscountAmount
			);
			Next;
		end;
		Close;
	end;
	adc.Destroy;
end;

class function TGoodRepository.GetLastInsertedId(ABaseName: string): integer;
var
	adc: TDBCompsAddit;
begin
	adc := TDBCompsAddit.Create(ABaseName);
	if not adc.Init then
	begin
		result := -1;
		raise Exception.Create('TGoodRepository.GetLastInsertedId(); Can not init adc');
		adc.Destroy;
		Exit;
	end;
	with adc.query do
	begin
		SQL.Text := 'Select gen_id(GEN_GOODS_ID, 0) from rdb$database';
		try
			Open;
		except
			on E:Exception do
			begin
				result := -1;
				raise Exception.Create(
				'TGoodRepository.GetLastInsertedId(); Can not execute query! Error: ' + E.Message
			);
				adc.Destroy;
				Exit;
			end;
		end;
		result := Fields[0].AsInteger;
	end;
	adc.Destroy;
end;

end.
