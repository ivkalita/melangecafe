unit IngredientCard;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Measure, Vcl.StdCtrls, Vcl.ExtCtrls, Ingredient,
  Vcl.Grids, IngredientRecipe;

type
	TfmIngredientCard = class(TForm)
		leCaption: TLabeledEdit;
		pnlBtns: TPanel;
		btnSave: TButton;
		btnCancel: TButton;
		cbMeasure: TComboBox;
		lbMeasure: TLabel;
		pnlIngredientInfo: TPanel;
		pnlRecipe: TPanel;
		pnlRecipeBtns: TPanel;
		btnRecipeCreate: TButton;
		btnRecipeDelete: TButton;
		btnRecipeEdit: TButton;
		sgRecipes: TStringGrid;
		procedure leCaptionClick(Sender: TObject);
		procedure btnSaveClick(Sender: TObject);
		procedure btnCancelClick(Sender: TObject);
    procedure btnRecipeCreateClick(Sender: TObject);
	private
	{ Private declarations }
	public
		BaseName: string;
		measures: TMeasureArray;
		recipes: TIngredientRecipeArray;
		PIngredient: TPIngredient;
		procedure prepare();
		procedure resetRecipes();
	{ Public declarations }
	end;

function show(APIngredient: TPIngredient; ABaseName: string): boolean;

var
  fmIngredientCard: TfmIngredientCard;

implementation

{$R *.dfm}

uses ValInput, MeasureRepository, IngredientRecipeRepository, vars;

function show(APIngredient: TPIngredient; ABaseName: string): boolean;
begin
	if (fmIngredientCard = nil) then
	begin
        fmIngredientCard := TfmIngredientCard.Create(nil);
	end;
	fmIngredientCard.BaseName := ABaseName;
	fmIngredientCard.PIngredient := APIngredient;
	fmIngredientCard.prepare();
	fmIngredientCard.ShowModal();
	result := fmIngredientCard.ModalResult = mrOk;
end;

{ TfmIngredientCard }

procedure TfmIngredientCard.btnCancelClick(Sender: TObject);
begin
	ModalResult := mrCancel;
	CloseModal;
end;

procedure TfmIngredientCard.btnRecipeCreateClick(Sender: TObject);
var
	Recipe: TIngredientRecipe;
begin
	Recipe := TIngredientRecipe.Create(
		TIngredient.Create(PIngredient^.Id)
	);
	if (IngredientRecipeCard.show(@Recipe, BaseName)) then
	begin
	   Recipe.Insert(BaseName);
	   resetRecipes();
	end;
end;

procedure TfmIngredientCard.btnSaveClick(Sender: TObject);
var
	selMeasure: integer;
begin
	selMeasure := cbMeasure.ItemIndex;
	if (selMeasure < 0) or (selMeasure >= length(measures)) then
	begin
		ShowMessage('Выберите единицу измерения!');
		Exit;
	end;
    PIngredient^.Measure := measures[selMeasure];
	PIngredient^.Caption := leCaption.Text;
	ModalResult := mrOk;
	CloseModal;
end;

procedure TfmIngredientCard.leCaptionClick(Sender: TObject);
var
	s: string;
begin
	s := GetText(false, 'Название ингредиента', 'Введите название');
	leCaption.Text := s;
end;

procedure TfmIngredientCard.prepare;
var
	i: integer;
	idx: integer;
begin
	leCaption.Text := PIngredient^.Caption;
	cbMeasure.Items.Clear;
	cbMeasure.Text := '';
	measures := TMeasureRepository.GetAll(BaseName);
	for i := 0 to high(measures) do
	begin
		if (PIngredient^.Id > 0) then
		begin
			if (PIngredient^.Measure.Id = measures[i].Id) then
			begin
                idx := i;
            end;
        end;
		cbMeasure.Items.Add(measures[i].Caption);
	end;
	cbMeasure.ItemIndex := idx;
	cbMeasure.Update;
	if (PIngredient^.Id > 0) then
	begin
		pnlRecipe.Enabled := true;
		with sgRecipes do
		begin
			RowCount := 1;
			ColCount := 4;
			FixedCols := 1;
			Cells[0, 0] := 'Id';
			Cells[1, 0] := 'Ингредиент';
			Cells[2, 0] := 'Количество';
			Cells[3, 0] := 'Ед. измерения';
			ColWidths[0] := 50;
			ColWidths[1] := 200;
			ColWidths[2] := 150;
			ColWidths[3] := 150;
		end;
        resetRecipes();
	end
end;

procedure TfmIngredientCard.resetRecipes;
var
	i: integer;
begin
	for i := 0 to high(recipes) do
	begin
		FreeAndNil(recipes[i]);
	end;
	setlength(recipes, 0);
	recipes := TIngredientRecipeRepository.GetAllForIngredient(BaseName, PIngredient^.Id);
	with sgRecipes do
	begin
		RowCount := 1;
		for i := 0 to high(recipes) do
		begin
			RowCount := RowCount + 1;
			Cells[0, i + 1] := IntToStr(recipes[i].Id);
			Cells[1, i + 1] := recipes[i].Part.Caption;
			Cells[2, i + 1] := AmountToStr(recipes[i].Amount);
			Cells[3, i + 1] := recipes[i].Part.Measure.Caption;
		end;
	end;
end;

end.
