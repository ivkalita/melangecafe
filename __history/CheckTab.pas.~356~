unit CheckTab;

interface
uses Vcl.ComCtrls, Vcl.Grids, Vcl.Controls, Dialogs, System.SysUtils, Vcl.ExtCtrls,
   Vcl.StdCtrls, System.Types, Vcl.Graphics, System.Classes;
type
   TRGood = record
      id: Integer;
      amount, actionAmount: Double;
      actionAble: boolean;
   end;

   TCheckTab = class
   public
      grid: TStringGrid;
      tab: TTabSheet;
      name: string;
      pc: TPageControl;
      tag: integer;
      isReturn: boolean;
      pnlSumm: TPanel;
      lblSumm: TLabel;
      edtSumm: TEdit;
      goods: array of TRGood;
      isFakePrinted: boolean;
   public
      constructor Create(APc: TPageControl; ATag: integer);
      procedure SetReturned;
      procedure AddGoodInfo(AId: integer; AAmount, AActionAmount: double; AActionAble: boolean);
      destructor Destroy;
      procedure DoDeleteGood(AId: integer);
   private
      procedure ReturnedGridDrawCell(Sender: TObject; ACol, ARow: Integer; Rect: TRect; State: TGridDrawState);
      procedure gridMouseUp(Sender: TObject; Button: TMouseButton;
         Shift: TShiftState; X, Y: Integer);
   end;
implementation

uses
  vars, PlatformSizes, ValInput;


{ TCheckTab }

procedure TCheckTab.AddGoodInfo(AId: integer; AAmount, AActionAmount: double;
   AActionAble: boolean);
begin
   setlength(goods, length(goods) + 1);
   with goods[high(goods)] do
   begin
      id := AId;
      amount := AAmount;
      actionAmount := AActionAmount;
      actionAble := AActionAble;
   end;
end;

constructor TCheckTab.Create(APc: TPageControl; ATag: integer);
begin
   tag := ATag;
   tab := TTabSheet.Create(APc);
   with tab do
   begin
      Parent := TWinControl(APc);
      PageControl := APc;
      Align := alClient;
      Caption := GetText(false, 'Открытие счета', 'Введите название');
      Tag := ATag;
   end;
   pnlSumm := TPanel.Create(tab);
   with pnlSumm do
   begin
      Parent := TWinControl(tab);
      align := alBottom;
      height := Sizes.checkPnlSummHeight;
   end;
   lblSumm := TLabel.Create(pnlSumm);
   with lblSumm do
   begin
      Parent := TWinControl(pnlSumm);
      Caption := 'Общая сумма:';
      Left := Sizes.checkLblSummLeft;
      Top := Sizes.checkLblSummTop;
      Width := Sizes.checkLblSummWidth;
      Height := Sizes.checkLblSummHeight;
   end;
   edtSumm := TEdit.Create(pnlSumm);
   with edtSumm do
   begin
      Parent := TWinControl(pnlSumm);
      Text := '0';
      Width := Sizes.checkEdtSummWidth;
      Left := lblSumm.Left + Sizes.checkEdtMargin;
      Top := lblSumm.Top;
      Height := lblSumm.Height;
      ReadOnly := true;
   end;
   grid := TStringGrid.Create(tab);
   with grid do
   begin
      Parent := TWinControl(tab);
      ColCount := 5;
      RowCount := 1;
      Align := alClient;
      Cells[0, 0] := 'Название';
      ColWidths[0] := Sizes.checkGridCol0Width;
      Cells[1, 0] := 'Цена';
      ColWidths[1] := Sizes.checkGridCol1Width;
      Cells[2, 0] := 'б/а';
      ColWidths[2] := Sizes.checkGridCol2Width;
      Cells[3, 0] := 'с/a';
      ColWidths[3] := Sizes.checkGridCol3Width;
      Cells[4, 0] := 'Стоимость';
      ColWidths[4] := Sizes.checkGridCol4Width;
      Options := Options - [goEditing];
//      OnDblClick := gridDblClick;
      OnMouseUp := gridMouseUp;
   end;
end;

destructor TCheckTab.Destroy;
begin
   FreeAndNil(lblSumm);
   FreeAndNil(edtSumm);
   FreeAndNil(pnlSumm);
   FreeAndNil(grid);
   FreeAndNil(tab);
end;

procedure TCheckTab.DoDeleteGood(AId: integer);
var
   i: integer;
   summ: double;
begin
   summ := goods[AId].amount * StrToPrice(grid.Cells[1, AId + 1]);
   summ := StrToPrice(edtSumm.Text) - summ;
   edtSumm.Text := PriceToStr(summ);
   for i := AId to High(goods) - 1 do
      goods[i] := goods[i + 1];
   SetLength(goods, length(goods) - 1);
   for i := AId + 1 to grid.RowCount - 2 do
   begin
      grid.Rows[i].Assign(grid.Rows[i + 1]);
   end;
   if grid.RowCount > 1 then
      grid.RowCount := grid.RowCount - 1;
end;

//procedure TCheckTab.gridDblClick(Sender: TObject);
//var
//   ns: string;
//   n, na: Double;
//   arow: integer;
//   summ, price: double;
//begin
//   arow := grid.Selection.Top;
//   if arow <= 0 then
//      exit;
//   n := goods[arow - 1].amount;
//   if InputQuery('Введите количество!', 'Количество без акции:', ns) then
//      begin
//         try
//            n := StrToPrice(ns);
//         except
//            on E:Exception do
//            begin
//               ShowMessage('Введено не корректное количество товара.');
//               exit;
//            end;
//         end;
//         if n <= 0 then
//         begin
//            ShowMessage('Количество не может быть отрицательным!');
//            exit;
//         end;
//      end
//      else
//         exit;
//      na := goods[arow - 1].actionAmount;
//      if goods[arow - 1].actionAble then
//         if InputQuery('Введите количество!', 'Количество с акцией:', ns) then
//         begin
//            try
//               na := StrToPrice(ns);
//            except
//               on E:Exception do
//               begin
//                  ShowMessage('Введено не корректное количество товара.');
//                  exit;
//               end;
//            end;
//            if na <= 0 then
//            begin
//               ShowMessage('Количество не может быть отрицательным!');
//               exit;
//            end;
//         end
//         else
//            exit;
//      grid.Cells[2, arow] := PriceToStr(n);
//      grid.Cells[3, arow] := PriceToStr(na);
//      price := StrToPrice(grid.Cells[1, arow]);
//      summ := StrToPrice(edtSumm.Text);
//      summ := summ - price * goods[arow - 1].amount; //old amount!!!
//      summ := summ + n * price;
//      goods[arow - 1].amount := n;
//      goods[arow - 1].actionAmount := na;
//      grid.Cells[4, arow] := PriceToStr(price * goods[arow - 1].amount);
//      edtSumm.Text := PriceToStr(summ);
//end;

//procedure TCheckTab.gridEditingDone(Sender: TObject; ACol, ARow: Integer;
//  const Value: string);
//var
//   newCnt: Double;
//   summ: double;
//   Value1: string;
//begin
//   Value1 := Value;
//   if Value = '' then
//   begin
//      grid.Cells[ACol, ARow] := PriceToStr(0);
//      Value1 := '0';
//   end;
//   try
//      newCnt := StrToPrice(Value1);
//   except
//      on E:Exception do
//      begin
//         ShowMessage('Введено некорректное количество товара!');
//         if ACol = 2 then
//            grid.Cells[ACol, ARow] := PriceToStr(goods[ARow - 1].amount)
//         else if ACol = 3 then
//            grid.Cells[ACol, ARow] := PriceToStr(goods[ARow - 1].actionAmount);
//         exit;
//      end;
//   end;
//   if (newCnt < 0) then
//   begin
//      if ACol = 2 then
//         grid.Cells[ACol, ARow] := PriceToStr(goods[ARow - 1].amount)
//      else if ACol = 3 then
//         grid.Cells[ACol, ARow] := PriceToStr(goods[ARow - 1].actionAmount);
//      exit;
//   end;
//   grid.Cells[ACol, ARow] := PriceToStr(newCnt);
//   if (ACol = 2) then
//   begin
//      summ := StrToPrice(edtSumm.Text);
//      summ := summ - goods[ARow - 1].amount * StrToPrice(grid.Cells[1, ARow]);
//      summ := summ + newCnt * StrToPrice(grid.Cells[1, ARow]);
//      goods[ARow - 1].amount := newCnt;
//      edtSumm.Text := PriceToStr(summ);
//   end
//   else if (ACol = 3) then
//   begin
//      goods[ARow - 1].actionAmount := newCnt;
//   end;
//end;
//
//procedure TCheckTab.gridSelectCell(Sender: TObject; ACol, ARow: Integer;
//  var CanSelect: Boolean);
//begin
//   if ((ACol = 2) or (ACol = 3)) and (ARow > 0) then
//      grid.Options := grid.Options + [goEditing]
//   else
//      grid.Options := grid.Options - [goEditing];
//end;

procedure TCheckTab.ReturnedGridDrawCell(Sender: TObject; ACol, ARow: Integer;
  Rect: TRect; State: TGridDrawState);
begin
   if ARow = 0 then
   begin
      grid.Canvas.Brush.Color := clRed;
      grid.Canvas.Font.Color := clWhite;
      grid.Canvas.FillRect(Rect);
      grid.Canvas.TextOut(Rect.Left + 2, Rect.Top + 2, grid.Cells[ACol, ARow]);
   end;
end;

procedure TCheckTab.SetReturned;
begin
   isReturn := true;
   grid.OnDrawCell := ReturnedGridDrawCell;
   grid.Invalidate;
end;

procedure TCheckTab.gridMouseUp(Sender: TObject; Button: TMouseButton;
  Shift: TShiftState; X, Y: Integer);
var
   ns: string;
   n, na: Double;
   arow, acol: integer;
   summ, price: double;
begin
   (Sender as TStringGrid).MouseToCell(x, y, acol, arow);
   if arow <= 0 then
      exit;
   if (ssCtrl in Shift) then
   begin
      if (MessageDlg('Подтвердите удаление товара!',mtWarning, [mbYes, mbNo], 0) = mrYes) then
         DoDeleteGood(arow - 1);
      Exit;
   end;
   n := goods[arow - 1].amount;

   ns := GetText(true, 'Введите количество!', 'Количество без акции:');
   try
      n := StrToPrice(ns);
   except
      on E:Exception do
      begin
         ShowMessage('Введено не корректное количество товара.');
         exit;
      end;
   end;
   if n < 0 then
   begin
      ShowMessage('Количество не может быть отрицательным!');
      exit;
   end;
   na := goods[arow - 1].actionAmount;
   if goods[arow - 1].actionAble then
   begin
      ns := GetText(true, 'Введите количество!', 'Количество с акцией:');
      try
         na := StrToPrice(ns);
      except
         on E:Exception do
         begin
            ShowMessage('Введено не корректное количество товара.');
            exit;
         end;
      end;
      if na < 0 then
      begin
         ShowMessage('Количество не может быть отрицательным!');
         exit;
      end;
   end;
   if n + na = 0 then
   begin
      if (MessageDlg('Подтвердите удаление товара!',mtWarning, [mbYes, mbNo], 0) = mrYes) then
         DoDeleteGood(arow - 1);
      Exit;
   end;

      exit;
   grid.Cells[2, arow] := PriceToStr(n);
   grid.Cells[3, arow] := PriceToStr(na);
   price := StrToPrice(grid.Cells[1, arow]);
   summ := StrToPrice(edtSumm.Text);
   summ := summ - price * goods[arow - 1].amount; //old amount!!!
   summ := summ + n * price;
   goods[arow - 1].amount := n;
   goods[arow - 1].actionAmount := na;
   grid.Cells[4, arow] := PriceToStr(price * goods[arow - 1].amount);
   edtSumm.Text := PriceToStr(summ);
end;

end.
